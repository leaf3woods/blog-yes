// <auto-generated />
using System;
using BlogYes.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlogYes.Infrastructure.Migrations
{
    [DbContext(typeof(PgDbContext))]
    [Migration("20230822123332_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogYes.Domain.Entities.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateTime")
                        .IsDescending();

                    b.HasIndex("ModifyTime")
                        .IsDescending();

                    b.HasIndex("SoftDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BlogId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Like")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("Star")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("PostTime")
                        .IsDescending();

                    b.HasIndex("SoftDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SoftDeleted");

                    b.HasIndex("Name", "SoftDeleted")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8df3280-8ab1-4b45-8d6a-6c3e669317ac"),
                            Description = "developer with all cathable resources even it was obselete",
                            Name = "developer",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4fe6ebb8-5001-40b4-a59e-d193ad9186f8"),
                            Description = "super user with all catchable resources",
                            Name = "super",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e1f23f37-919c-453b-aff1-1214415e54b8"),
                            Description = "admin to manage user resourcs",
                            Name = "admin",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cbc91154-913e-40ba-aa9b-4ebb551bac99"),
                            Description = "import user with some special resources",
                            Name = "vip",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4a15f57a-0cb7-4cc9-95c0-91ba672a341c"),
                            Description = "normal user with some basic resources",
                            Name = "member",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ffce17eb-a74c-4b44-aaac-2e2e78e04f9e"),
                            Description = "a visitor with some read resources",
                            Name = "visitor",
                            SoftDeleted = false
                        });
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Scope", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Scopes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "manage all user resources",
                            Name = "User",
                            RoleId = new Guid("e1f23f37-919c-453b-aff1-1214415e54b8")
                        },
                        new
                        {
                            Id = 2L,
                            Description = "manage all user resources",
                            Name = "User",
                            RoleId = new Guid("4fe6ebb8-5001-40b4-a59e-d193ad9186f8")
                        },
                        new
                        {
                            Id = 3L,
                            Description = "manage all role resources",
                            Name = "Role",
                            RoleId = new Guid("4fe6ebb8-5001-40b4-a59e-d193ad9186f8")
                        });
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Passphrase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SoftDeleted");

                    b.HasIndex("Username", "SoftDeleted")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6770d16-0ff0-436d-a4fd-ea18df643eae"),
                            DisplayName = "developer",
                            Email = "unknow",
                            Passphrase = "Uh+8E9ft9jptdMzAVRKo0UYQtqn5epsbJUZQGbL/Xhk=",
                            RegisterTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = new Guid("e8df3280-8ab1-4b45-8d6a-6c3e669317ac"),
                            Salt = "5+fPPv0FShtKo3ed746TiuNojEZsxuPkhbU+YvF5DuQ=",
                            SoftDeleted = false,
                            TelephoneNumber = "unknow",
                            Username = "dev"
                        });
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Blog", b =>
                {
                    b.HasOne("BlogYes.Domain.Entities.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogYes.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("BlogYes.Domain.ValueObjects.BlogValue.Tag", "Tags", b1 =>
                        {
                            b1.Property<long>("BlogId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BlogId", "Id");

                            b1.ToTable("Tag");

                            b1.WithOwner("Blog")
                                .HasForeignKey("BlogId");

                            b1.Navigation("Blog");
                        });

                    b.Navigation("Category");

                    b.Navigation("Tags");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BlogYes.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogYes.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Scope", b =>
                {
                    b.HasOne("BlogYes.Domain.Entities.Role", "Role")
                        .WithMany("Scopes")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.User", b =>
                {
                    b.HasOne("BlogYes.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BlogYes.Domain.ValueObjects.UserValue.Detail", "Detail", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AboutMe")
                                .HasColumnType("text");

                            b1.Property<int>("Gender")
                                .HasColumnType("integer");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("BlogYes.Domain.ValueObjects.UserValue.Setting", "Settings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.Navigation("Detail");

                    b.Navigation("Role");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Category", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.Role", b =>
                {
                    b.Navigation("Scopes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BlogYes.Domain.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
